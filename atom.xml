<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>葛布斯</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://NicholasYG.github.io/"/>
  <updated>2018-10-16T12:12:19.636Z</updated>
  <id>https://NicholasYG.github.io/</id>
  
  <author>
    <name>葛布斯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用AS上传lib(module)包到Nexus私服（3.x）</title>
    <link href="https://NicholasYG.github.io/2018/10/16/%E4%BD%BF%E7%94%A8AS%E4%B8%8A%E4%BC%A0lib(module)%E5%8C%85%E5%88%B0Nexus%E7%A7%81%E6%9C%8D%EF%BC%883.x%EF%BC%89/"/>
    <id>https://NicholasYG.github.io/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/</id>
    <published>2018-10-16T11:41:02.000Z</published>
    <updated>2018-10-16T12:12:19.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="本篇文章要解决的问题如下"><a href="#本篇文章要解决的问题如下" class="headerlink" title="本篇文章要解决的问题如下"></a>本篇文章要解决的问题如下</h3><ul><li>搭建nexus私服</li><li>在nexus上创建仓库</li><li>配置grald文件，上传lib(module)包</li><li>在AS中使用</li></ul><p>本篇文章是基于Mac系统的基础上，搭建nexus；和windows系统搭建稍有差异。另本版本是基于nexus3.13.0版本，请知晓。</p><h2 id="nexus服务器搭建"><a href="#nexus服务器搭建" class="headerlink" title="nexus服务器搭建"></a>nexus服务器搭建</h2><h3 id="java环境"><a href="#java环境" class="headerlink" title="java环境"></a>java环境</h3><p>此版本的nexus是基于java，要求java JRE的版本不低于1.8.0，所以安装之前，先检测自己本地安装的JRE版本是否符合要求。</p><ul><li>检测当前java版本命令，在终端输入<br><code>java -version</code></li></ul><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/jave_version.jpg" alt="版本图片"><br>如上图，版本在1.8以上就可以下载nexus啦。</p><h3 id="下载nexus"><a href="#下载nexus" class="headerlink" title="下载nexus"></a>下载nexus</h3><p>可以在<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">官方网站</a>下载最新版本的nexus，选择OS X版本</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/download_nexus.jpg" alt="下载截图"></p><p>下载完成后，打开解压包，会看到如下的目录</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/nexus_bin.jpg" alt="nexus文件目录"></p><p>接着在终端进入到bin目录下，输入命令 <code>nexus start</code> 看到 Starting nexus 字样就说明启动成功了</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/nexus_start.jpg" alt="开启nexus"></p><h2 id="在nexus上创建私有仓库"><a href="#在nexus上创建私有仓库" class="headerlink" title="在nexus上创建私有仓库"></a>在nexus上创建私有仓库</h2><h3 id="访问nexus和界面介绍"><a href="#访问nexus和界面介绍" class="headerlink" title="访问nexus和界面介绍"></a>访问nexus和界面介绍</h3><p>在本地浏览器输入<code>http://localhost:8081/</code> 跳转到nexus首页</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/nexus_index_page.jpg" alt="nexus首页"></p><p>在<code>Sign in</code>登录入口登录账号，nexus提供了一个公用账号 账号：admin 密码：admin123,登录上之后点击下图中第一步进入到设置界面，如下：</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/repository_page.jpg" alt="nexus首页"></p><p>点击第二步跳转到创建仓库界面。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>跳转到创建仓库界面，如下图</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/repository_list_default.jpg" alt="仓库列表界面"></p><p>可以看到nexus为我们创建了默认的仓库，在type列有<code>proxy、group、hosted</code>等类型，这三种类型都有什么作用呢？且看下面的解释：</p><ul><li>proxy（远程代理仓库）</li></ul><blockquote><p>这种类型的仓库，可以设置一个远程仓库的链接。当用户向 proxy 类型仓库请求下载一个依赖构件时，就会先在自己的库里查找，如果找不到的话，就会从设置的远程仓库下载到自己的库里，然后返回给用户，相当于起到一个中转的作用。例如 maven-central 用来存储从 Maven 中央仓库下载过的构件。</p></blockquote><ul><li>group （聚合仓库）</li></ul><blockquote><p>在 Maven 里没有这个概念，是 Nexus 特有的。目的是将多个仓库聚合，对用户暴露统一的地址，这样用户就不需要配置多个地址，只要统一配置 group 的地址就可以了。group 仓库的聚合成员可以在仓库设置中添加和移除。例如 maven-public 是一个 group 类型的仓库，通过引用这个地址，可以访问组内成员仓库的所有构件。</p></blockquote><ul><li>hosted（宿主仓库）</li></ul><blockquote><p>我们自己的构件，上传的就是这样的仓库。目前 maven-releases 和 maven-snapshots 是 hosted 类型的仓库。我们可以上传到这两个仓库，也可以自己创建 hosted 仓库。</p></blockquote><p>接着点击<code>Create Repositories</code>按钮，跳转到选择仓库界面，选择<code>maven2（hosted）</code>仓库</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/select_page.jpg" alt="选择仓库界面"></p><p>接下来是仓库的配置，可以根据自己的需求来修改</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/repository_detail.jpg" alt="配置详情页"></p><p>对于上面Maven2中Version policy的配置，官方是这样解释的:</p><ul><li>Release</li></ul><blockquote><p>可以将Maven存储库配置为适用于发布版本策略的发布组件。中央存储库使用发布版本策略</p></blockquote><ul><li>Snapshot</li></ul><blockquote><p>持续开发通常使用快照版本策略支持的快照版本执行。这些版本值必须以POM文件中的-SNAPSHOT结尾。这允许重复上传，其中实际使用的数字由日期/时间戳和枚举数组成，而且检索仍然可以使用-SNAPSHOT版本字符串。存储库管理器和客户机工具管理从快照版本到时间戳值的转换的元数据文件。</p></blockquote><ul><li>Mixed</li></ul><blockquote><p>混合版本策略允许您在一个存储库中支持这两种方法。</p></blockquote><p>附上<a href="https://help.sonatype.com/repomanager3/maven-repositories" target="_blank" rel="noopener">官方文档</a>，可以去看其他的配置解释。</p><p>点击保存，仓库就创建好了。回到首页，选择Browse，就可以看到我们刚才创建的仓库</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/new_repository.jpg" alt="新创建仓库"></p><p>点击列表中的<code>Copy</code>按钮，从弹框中获取到仓库地址，暂时保存待会儿会用到。</p><h2 id="创建lib（module）包，通过gradle上传"><a href="#创建lib（module）包，通过gradle上传" class="headerlink" title="创建lib（module）包，通过gradle上传"></a>创建lib（module）包，通过gradle上传</h2><h3 id="新建lib（module）包"><a href="#新建lib（module）包" class="headerlink" title="新建lib（module）包"></a>新建lib（module）包</h3><p>打开Android Studio在项目中创建lib包，选择Android Library；具体步骤如下：<br>在项目上右键，选择<code>new</code> –&gt; <code>Module</code> –&gt; <code>选择Android library</code></p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/new_lib.jpg" alt="新建lib"></p><p>接着next下一步就可以了</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/select_android.jpg" alt="选择Android类型"></p><p>在lib（module）中写自己想要上传的内容，简单写一个类一个方法可以在后面调用就可以。</p><h3 id="配置gradle文件"><a href="#配置gradle文件" class="headerlink" title="配置gradle文件"></a>配置gradle文件</h3><p>内容补充完成后，需要在自己创建的lib（module）包的<code>build.gradle</code>文件中添加上传的代码，代码内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;maven&apos;</span><br><span class="line">task androidSourcesJar(type: Jar) &#123;</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives androidSourcesJar</span><br><span class="line">&#125;</span><br><span class="line">afterEvaluate &#123; project -&gt;</span><br><span class="line">    uploadArchives &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            mavenDeployer &#123;</span><br><span class="line">                    //远程仓库的地址</span><br><span class="line">                repository(url: &quot;http://localhost:8081/repository/TestRepositoris/&quot;) &#123;</span><br><span class="line">                    //nexus登录的用户名和密码</span><br><span class="line">                    authentication(userName: &quot;admin&quot;, password: &quot;admin123&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                pom.project &#123;</span><br><span class="line">                    /**</span><br><span class="line">                     * 这三个字段是组成后续引用的关键，举例：</span><br><span class="line">                     * 之后在项目中会这样引用</span><br><span class="line">                     * com.xxx:testlibrary:1.0.0</span><br><span class="line">                     */</span><br><span class="line">                    groupId &apos;com.xxx&apos;</span><br><span class="line">                    artifactId &apos;testlibrary&apos;</span><br><span class="line">                    version &apos;1.0.0&apos;//版本号 </span><br><span class="line">                    packaging &apos;aar&apos;//打包的格式</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为方便配置也可以将上述代码新建一个gradle上传文件，在lib的build.gradle文件中来引用，具体操作：在lib(module)包上右键 –&gt; <code>New</code> –&gt; <code>File</code>；</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/new_gradle.jpg" alt="创建gradle文件"></p><p>之后创建.gradle为后缀名的文件</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/file_gradle.jpg" alt="gradle文件"></p><p>将上面配置代码复制进去,接着打开lib(module)包的<code>build.gradle</code>文件，引入新建的gradle文件，在上面添加<code>apply from: &#39;./upload.gradle&#39;</code> upload.gradle指的就是你创建的gradle文件，引入到build.gradle文件中使用</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/quote_file.jpg" alt="引入文件"></p><p>最后还需要在项目根目录的build.gradle文件中添加我们的仓库地址</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/project_gradle.jpg" alt="项目的gradle"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.0.1&apos;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">        //对maven插件进行修改可以兼容android</span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.5&apos;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven&#123;//仓库的地址</span><br><span class="line">            url &apos;http://localhost:8081/repository/TestRepositoris/&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步一下文件，AS会把我们的lib(module)生成要上传的文件。</p><h3 id="上传lib-module-包到nexus私服"><a href="#上传lib-module-包到nexus私服" class="headerlink" title="上传lib(module)包到nexus私服"></a>上传lib(module)包到nexus私服</h3><p>在AS编辑器的右侧工具栏，点击Gradle –&gt; 选择自己的项目 –&gt; 点击upload文件 –&gt; 双击uploadArchives</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/upload_lib.jpg" alt="上传lib包"></p><p>等待上传完成之后，就可以去私服上查看啦。点击自己创建的仓库查看：</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/upload_list_brower.jpg" alt="浏览器列表"></p><p>切换视图，网页版的展示</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/upload_list_html.jpg" alt="html浏览"></p><p>至此上传部分的工作已经完成；接下来就是在项目使用了。</p><h2 id="在AS中使用仓库中的lib"><a href="#在AS中使用仓库中的lib" class="headerlink" title="在AS中使用仓库中的lib"></a>在AS中使用仓库中的lib</h2><h3 id="在项目中引用"><a href="#在项目中引用" class="headerlink" title="在项目中引用"></a>在项目中引用</h3><ul><li>复制仓库的地址，放置在你想要引用项目的根目录的<code>build.gradle</code>中。注意：这里的项目是放置另外一个项目中，和lib包不是在同一个项目</li></ul><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/quote_project_gradle.jpg" alt="新项目中的引用"></p><ul><li>然后在app的<code>build.gradle</code>中加入<code>compile &#39;com.test:testlibrary:1.0.0&#39;</code></li></ul><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/quote_app_grade.jpg" alt="app的gradle中"></p><p>同步一下，就可以在代码中愉快的使用了，我是在lib包中放了一些关于缓存的代码，在项目中使用：</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/user_code.jpg" alt="代码中使用"></p><p>点击进去查看ACache文件，可以看到路径</p><p><img src="/2018/10/16/使用AS上传lib(module)包到Nexus私服（3.x）/lib_path.jpg" alt="路径"></p><p>到这里整个建库、上传、使用整个流程都完成了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>第一次写公开式博客，历时2天，中间写写停停，还好最后算是勉强完成；之前自己有想记录的东西，都是以笔记的形式记录下来，很是粗糙，自己能看懂就行，不够细致，这篇写下来感觉真的很能加强知识点深度，强迫自己看了平时不愿看的英文文档，还写了迟迟不肯动手的demo，当写完的那一刻有一种酣畅淋漓的舒爽。第一次写还有许多不足的地方，会不断去完善，去修正编写的方式。坚持写下去，做一个深入简出的讲述者。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>写这篇博客参考了几位前辈的博客，在这里贴上链接，他们写的都很好，很值得借鉴和学习。</p><p><a href="https://blog.csdn.net/qq_32452623/article/details/79385595" target="_blank" rel="noopener">Android-Nexus 搭建自己的 Maven 仓库 &amp; Gradle 上传依赖包</a></p><p><a href="https://www.cnblogs.com/whoislcj/p/6490120.html" target="_blank" rel="noopener">Android业务组件化之Gradle和Sonatype Nexus搭建私有maven仓库</a></p><p><a href="https://www.jianshu.com/p/348cdc711c00" target="_blank" rel="noopener">Android依赖管理与私服搭建</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;本篇文章要解决的问题如下&quot;&gt;&lt;a href=&quot;#本篇文章要解决的问题如下&quot; class=&quot;headerlink&quot; title=&quot;本
      
    
    </summary>
    
      <category term="java" scheme="https://NicholasYG.github.io/categories/java/"/>
    
    
      <category term="Android" scheme="https://NicholasYG.github.io/tags/Android/"/>
    
      <category term="nexus" scheme="https://NicholasYG.github.io/tags/nexus/"/>
    
      <category term="java" scheme="https://NicholasYG.github.io/tags/java/"/>
    
  </entry>
  
</feed>
